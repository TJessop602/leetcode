class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        
        def BFS(start, end):

            if start not in graph or end not in graph:
                return -1

            q = deque()
            q.append((start,1))
            seen = set()

            while(q):
                curr, cost = q.popleft()
                if curr == end:
                    return cost
                seen.add(curr)
                for node, val in graph[curr]:
                    if node not in seen:
                        q.append((node, cost*val))
                        seen.add(node)
            return -1
                    
        graph = defaultdict(list)

        for i, equation in enumerate(equations):                    #Figuring out how to make this graph correctly is the main point of
            graph[equation[0]].append((equation[1], values[i]))     #difficulty in this problem. Once you have this part right, the rest
            graph[equation[1]].append((equation[0], 1/values[i]))   #is just a bog standard breadth first search.
        
        return [BFS(start, end) for start, end in queries]
