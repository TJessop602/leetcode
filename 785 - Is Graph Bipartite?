#Traverse the graph starting from each node and attempt assign alternating
#colours to each. If it is possible to do this for the entire graph, then
#the graph is bipartite. If it isn't possible (i.e. there is an odd length cycle) 
#then it isn't bipartite.

class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        colours = [0]*len(graph)

        def dfs(node, colour):
            colours[node] = colour
            for outgoing in graph[node]:
                if colours[outgoing] != 0:
                    if colours[outgoing] == colour:
                        return False
                else:
                    if not dfs(outgoing, -1*colour):
                        return False
            return True

        for node in range(len(graph)):
            if not colours[node] and not dfs(node, 1):
                return False
        return True
