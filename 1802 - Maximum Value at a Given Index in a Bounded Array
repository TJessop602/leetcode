/* 

n = 8, idx = 3, maxSum = 50

0 1 2 3 4 5 6 7 
     l/r       |
      1        |
    l   r      |
    1 1 1      |
  l       r    |
  1 1 1 1 1    |
l           r  |
1 1 1 1 1 1 1  |   each layer adds right-left+1 1s to the pyrimid
l             r|
1 1 1 1 1 1 1 1|   if both ends are hit, each layer just adds n and therefore
l             r|   we can add (maxSum-(#of 1s already in pyrimid))/n more layers
1 1 1 1 1 1 1 1|   and so can just return the current height plus this amount.
l             r|
1 1 1 1 1 1 1 1|
l             r|
1 1 1 1 1 1 1 1|   the final height is 8 in this case.
===============
5 6 7 8 7 6 5 4|   adding up the 1s in each column gives the form of the final array
*/

#define MAX(x, y) (((x) > (y)) ? (x) : (y))
#define MIN(x, y) (((x) < (y)) ? (x) : (y))

int maxValue(int n, int index, int maxSum){
    int left = index, right = index, sum = n, height = 1;
    
    while(sum + right - left + 1 <= maxSum){
        sum += right - left + 1;

        left = MAX(0, left-1);
        right = MIN(n-1, right+1);
        height++;

        if(left == 0 && right == n-1){
            return height + (maxSum - sum)/n;
        }
    }
    return height;
}
