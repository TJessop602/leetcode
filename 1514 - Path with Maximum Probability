class Solution:
    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start: int, end: int) -> float:
        graph = defaultdict(list)
        for i in range(len(edges)):
            graph[edges[i][0]].append((succProb[i],edges[i][1]))
            graph[edges[i][1]].append((succProb[i],edges[i][0]))

        q = []
        seen = set()
        heappush(q,(-1,start))

        while len(q) != 0:
            prob, curr = heappop(q)
            if curr in seen:
                continue
            if curr == end:
                return -prob
            seen.add(curr)
            for child in graph[curr]:
                heappush(q,((child[0]*prob), child[1]))
        return 0
